# -*- coding: utf-8 -*-
"""Plant pathology.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X4zb8jw2u-GvngHWqnDDwUrBEfqRThl5
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

path_train="/content/drive/My Drive/plant-pathology-2020-fgvc7/train.csv"
path_test="/content/drive/My Drive/plant-pathology-2020-fgvc7/test_1.csv"
plant_test=pd.read_csv(path_test)
plant_train=pd.read_csv(path_train)

import os, random
import shutil

src_dir1 = "/content/drive/My Drive/plant-pathology-2020-fgvc7/images/"

dst_dir1 = "/content/drive/My Drive/plant-pathology-2020-fgvc7/training_2/multiple/"
dst_dir2 = "/content/drive/My Drive/plant-pathology-2020-fgvc7/training_2/rust/"
dst_dir3 = "/content/drive/My Drive/plant-pathology-2020-fgvc7/training_2/scab/"
dst_dir4 = "/content/drive/My Drive/plant-pathology-2020-fgvc7/training_2/t_none/"

#file_list1 = os.listdir(src_dir1)
#file_list2 = os.listdir(src_dir2)
img_id = plant_train.loc[ : , 'image_id' ]
img_name = img_id.values.tolist()
mul = plant_train.loc[ : , 'multiple_diseases' ]
mul_val= mul.values.tolist()
rust = plant_train.loc[ : , 'rust' ]
rust_val= rust.values.tolist()
scab = plant_train.loc[ : , 'scab' ]
scab_val= scab.values.tolist()
#img_name=[]
#health=[]
for i in range(0,(len(img_id)-1)):
  if mul_val[i]==1:
    shutil.copyfile(src_dir1 + img_name[i] + ".jpg", dst_dir1 + img_name[i] + ".jpg")
  elif rust_val[i]==1:
    shutil.copyfile(src_dir1 + img_name[i] + ".jpg", dst_dir2 + img_name[i] + ".jpg")
  elif scab_val[i]==1:
    shutil.copyfile(src_dir1 + img_name[i] + ".jpg", dst_dir3 + img_name[i] + ".jpg")
  else:
    shutil.copyfile(src_dir1 + img_name[i] + ".jpg", dst_dir4 + img_name[i] + ".jpg")

import tensorflow as tf
import os
DESIRED_ACCURACY = 0.999

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self,epoch,logs={}):
      if(logs.get('acc')>=DESIRED_ACCURACY):
          print("Reached 99.9% accuracy so cancelling training!")
          self.model.stop_training=True

callbacks = myCallback()
    
model = tf.keras.models.Sequential([
tf.keras.layers.Conv2D(16,(3,3),activation='relu',input_shape=(150,150,3)),
tf.keras.layers.MaxPooling2D(2,2),
tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
tf.keras.layers.MaxPooling2D(2,2),
tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
tf.keras.layers.MaxPooling2D(2,2),
tf.keras.layers.Flatten(), 
tf.keras.layers.Dense(128,activation=tf.nn.relu),
tf.keras.layers.Dense(1, activation='sigmoid')
])

from tensorflow.keras import optimizers
adm=tf.keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False)
model.compile(loss='binary_crossentropy',optimizer=adm,metrics=['acc'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale=1./255) 
validation_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/My Drive/plant-pathology-2020-fgvc7/training/', 
    target_size=(150,150), 
    batch_size=80, 
    class_mode='binary'
)

filepath="/content/drive/My Drive/plant-pathology-2020-fgvc7/weights_ckpt.ckpt"
checkpoint = tf.keras.callbacks.ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')

history = model.fit_generator(
    train_generator,
    steps_per_epoch=8,
    epochs=50,
    verbose=1,
    shuffle=True,
    callbacks=[callbacks, checkpoint]
)

print(history.history['acc'][-1])

model.save("/content/drive/My Drive/plant-pathology-2020-fgvc7/plant_pathology.h5")

import tensorflow as tf

model = tf.keras.models.load_model('/content/drive/My Drive/plant-pathology-2020-fgvc7/plant_pathology.h5')

file_list1 = os.listdir(src_dir1)

import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():
 
  # predicting images
  path = '/content/' + fn
  img = image.load_img(path, target_size=(150, 150))
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  print(classes)
  print(classes[0])
  if classes[0]>0.5:
    print(fn + " is good")
  else:
    print(fn + " is bad")

import os, random
import shutil

src_dir1 = "/content/drive/My Drive/plant-pathology-2020-fgvc7/images/"

dst_dir1 = "/content/drive/My Drive/plant-pathology-2020-fgvc7/testing/"

#file_list1 = os.listdir(src_dir1)
#file_list2 = os.listdir(src_dir2)
img_id = plant_test.loc[ : , 'image_id' ]
img_name = img_id.values.tolist()
#img_name=[]
#health=[]
for i in range(0,(len(img_id)-1)):
  shutil.copyfile(src_dir1 + img_name[i] + ".jpg", dst_dir1 + img_name[i] + ".jpg")

from csv import writer

file_list1 = os.listdir(dst_dir1)
cls=[]

for f in file_list1:
  path = dst_dir1 + f
  img = image.load_img(path, target_size=(150, 150))
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  #print(classes)
  #print(classes[0])
  if classes[0]>0.5:
    cls.append(1)
  else:
    cls.append(0)

col=['healthy']
for i in cls:
  col.append(i)

print(col)

col[0]

len(cls)

from csv import writer

from csv import writer
from csv import reader

# Open the input_file in read mode and output_file in write mode
with open('/content/drive/My Drive/plant-pathology-2020-fgvc7/test.csv', 'r') as read_obj, \
        open('/content/drive/My Drive/plant-pathology-2020-fgvc7/test_1.csv', 'w', newline='') as write_obj:
    # Create a csv.reader object from the input file object
    csv_reader = reader(read_obj)
    # Create a csv.writer object from the output file object
    csv_writer = writer(write_obj)
    # Read each row of the input csv file as list
    i=0
    for row in csv_reader:
        # Append the default text in the row / list
        if i<=1820:
          row.append(col[i])
          i=i+1
        else:
          break
        # Add the updated row / list to the output file
        csv_writer.writerow(row)

import tensorflow as tf
import os
DESIRED_ACCURACY = 0.999

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self,epoch,logs={}):
      if(logs.get('acc')>=DESIRED_ACCURACY):
          print("Reached 99.9% accuracy so cancelling training!")
          self.model.stop_training=True

callbacks = myCallback()
    
model = tf.keras.models.Sequential([
tf.keras.layers.Conv2D(16,(3,3),activation='relu',input_shape=(150,150,3)),
tf.keras.layers.MaxPooling2D(2,2),
tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
tf.keras.layers.MaxPooling2D(2,2),
tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
tf.keras.layers.MaxPooling2D(2,2),
tf.keras.layers.Flatten(), 
tf.keras.layers.Dense(128,activation=tf.nn.relu),
tf.keras.layers.Dense(4, activation='softmax')
])

from tensorflow.keras import optimizers
adm=tf.keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False)
model.compile(loss='categorical_crossentropy',optimizer=adm,metrics=['acc'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale=1./255) 
validation_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/My Drive/plant-pathology-2020-fgvc7/training_2/', 
    target_size=(150,150), 
    batch_size=80, 
    class_mode='categorical'
)

history = model.fit_generator(
    train_generator,
    steps_per_epoch=50,
    epochs=80,
    verbose=1,
    shuffle=True,
    callbacks=[callbacks]
)

print(history.history['acc'][-1])

model.save("/content/drive/My Drive/plant-pathology-2020-fgvc7/plant_pathology_diseases.h5")

import tensorflow as tf

model = tf.keras.models.load_model('/content/drive/My Drive/plant-pathology-2020-fgvc7/plant_pathology_diseases.h5')

from tensorflow.keras.preprocessing.image import ImageDataGenerator
test_datagen = ImageDataGenerator(rescale=1./255) 

test_generator = test_datagen.flow_from_directory(
    '/content/drive/My Drive/plant-pathology-2020-fgvc7/test_images/', 
    target_size=(150,150), 
    batch_size=80, 
    class_mode='categorical'
)

pred_vals=model.predict(test_generator)

test_imgs = ["/content/drive/My Drive/plant-pathology-2020-fgvc7/test_images/testing/{}.jpg".format(x) for x in list(plant_test.image_id)]
test_set = pd.DataFrame( {'Images': test_imgs })

from keras.preprocessing import image

Y_pred = []

for i in range(len(test_set)):
  img = image.load_img(path= test_set.Images[i],target_size=(150,150,3))
  img = image.img_to_array(img)
  test_img = img.reshape((1,150,150,3))
  img_class = model.predict_classes(test_img)
  prediction = img_class[0]
  Y_pred.append(prediction)

img = image.load_img(path="",target_size=(150,150,3))
  img = image.img_to_array(img)
  test_img = img.reshape((1,150,150,3))
  img_class = model.predict_classes(test_img)
  prediction = img_class[0]
  Y_pred.append(prediction)

print(Y_pred)

len(Y_pred)

mul=["multiple"]
for i in  Y_pred:
  if i==0:
    mul.append(1)
  else:
    mul.append(0)

print(mul)

mul[0]="multiple_diseases"

rust=["rust"]
for i in  Y_pred:
  if i==1:
    rust.append(1)
  else:
    rust.append(0)

scab=["scab"]
for i in  Y_pred:
  if i==2:
    scab.append(1)
  else:
    scab.append(0)

from csv import writer
from csv import reader

# Open the input_file in read mode and output_file in write mode
with open('/content/drive/My Drive/plant-pathology-2020-fgvc7/test_3.csv', 'r') as read_obj, \
        open('/content/drive/My Drive/plant-pathology-2020-fgvc7/test_4.csv', 'w', newline='') as write_obj:
    # Create a csv.reader object from the input file object
    csv_reader = reader(read_obj)
    # Create a csv.writer object from the output file object
    csv_writer = writer(write_obj)
    # Read each row of the input csv file as list
    i=0
    for row in csv_reader:
        # Append the default text in the row / list
        if i<=1820:
          row.append(scab[i])
          i=i+1
        else:
          break
        # Add the updated row / list to the output file
        csv_writer.writerow(row)

rust[1821]